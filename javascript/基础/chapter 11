chapter 11 DOM 扩展
Selectors API
  querySelector()   querySelectorAll()
参数可为类名，ID，标签名(tagName),前者返回第一个，后者返回所有符合的数组
若在元素上调用，则在其后代中寻找，例子：
var div = document.querySelector("img.button");
//返回第一个类名为button 的 img
var strongs = document.querySelectorAll("p strong");
//取得所有P元素中的strong元素

Element Traversal  元素遍历
childElementCount		//都为元素节点，不包含文本节点
firstElementChild
lastElementChild
previousElementSibling
nextElmentSibling

HTML 5
getElementByClassName		//原生实现，效率高
classList.add(value) contains() remove() toggle() 
//对元素类名的各种操作，toggle是切换，有就删除，没有就加

焦点管理
document.activeElement		//获得焦点的元素，可用 element.focus()获取焦点;

自定义属性
<div id="kkk" data-myname="tim"></div>
var div = document.querySelector("#kkk");
div.dataset.myname = "micheal";   //"tim"--->"micheal"
//其中，自定义属性最好全部小写并用连接符，在JS中使用骆驼命名法
//data-my-name			div.dataset.myName

插入HTML标记
可设置Element.innerHtml,但不要频繁操作，最好所有标记放到字符串中，最后设置innerhtml，如
var insertHtml = "";
for(var i=0; i<10; i++) {
    insetHtml += "<li>" + i +"</li>"
}
var ul = document.querySelector("ul");
ul.innerHtml = insertHtml;

element.children
返回元素节点

parentElement.contains(sonElement)	//true
var result = parentElement.compareDocumentPosition(sonElement);//数值
return (!!(result & 16));	//&是按位与，最终结果为布尔值   p41	p300


