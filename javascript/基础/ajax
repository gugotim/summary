新建一个ajax请求使用new XMLHTTPRequest();
var request = new XMLHTTPRequest();
request.open("GET", "example.txt", true);
if(request){
	request.onreadystatechange = function(){
		if(request.readyState == 4){
			//do something
		}
		request.send(somedata);
	}
} else {
	alert("sorry, your browser doesn't support XMLHTTPRequest.");
}
另外，使用XMLHTTPRequest只能请求访问与html同属一个域的数据，不能请求其他域数据。

渐进增强地使用ajax
如登陆，先按照正常方式创建表单和submit,然后在onsubmit里使用ajax，若用户禁用了JS，onsubmit不起作用，表单按照传统方式整个传递，返回结果刷新整个页面，若开启了JS则使用ajax

onreadystatechange内部使用request.responseText而不是this.responseText来获取数据，
因为作用域问题this有时会导致失败

request.abort()可用于终止ajax请求，终止后应使用对requset = null;来解除内存占用


xhr.open()发送的URL应保持格式良好，即使用encodeURLComponent()编码，以转义空格 /等字符,可以使用
function addURLParam(url, name, value) {
  url += (url.indexOf('?') == -1 ? '?' : '&');
  url += encodeURIComponent(name) + '=' + encodeURIComponent(value);
  return url;
}

服务器Post和表单提交请求并不相同，但可以让post模仿表单提交
xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
var form = document.getElementById('user-info');
xhr.send(new FormData(form));			//FormData()用于表单序列化,是XMLHTTPRequest 2级
还可以这样使用FormData,
var data = new FormData();
data.append('name', 'tim');
data.append('book', 'javascript pro');
xhr.send(data);

Get请求的速度可达到Post的两倍

overrideMimeType
服务器返回的数据MIME类型是plain/text,这样即使包含XML但xhr.responseXML仍是null,
可让XHR对象强制将返回的结果当作XML处理，但必须在send之前
xhr.overrideMimeType('text/xml');//除了IE基本都支持


xhr.onprogress
此事件拥有event.lengthComputable(进度信息是否可用),
 event.position（已接受字节数）, event.totalSize（根据Content-Length的预期字节数）
可用于制作进度条

CORS跨源资源共享
实现：
1.IE
	IE8引入 XDR
	var xdr = new XdomainRequest();
	xdr.onload = function() {//只能访问原始文本
		alert(xdr.responseText);//接到响应就触发，无法确定响应码
	}
	xdr.onerror = function() {
		alert('error');//无其他信息可用
	}
	xdr.open('get','http://baidu.com');
	xdr.send(null);

	xdr支持ontimeout
	xdr.timeout = 1000;//1s
	xdr.ontimeout = funciont() {alert('too long');};

	对于post请求可以设置contentType
	xdr.open('post', 'http://somewhere.com');
	xdr.contentType = 'application/x-www-form-urlencoded';
	xdr.send('name1=value1&name2=value2');

2.其他浏览器
	通过XMLHTTPRequest支持CORS,在open中传入绝对地址即可
	xhr.open('get', 'http://somewhere.com', true);//跨域xhr可以访问status和statusText属性，而且支持同步，但
	不能使用setRequestHeader()自定义头部
	不能发送和接收cookie
	调用getAllResponseHeaders()总返回空字符串
	所以，访问本地资源使用相对地址，跨域时绝对地址，以避免禁用cookie

withCredentials
为true时跨域可以发送凭据（cookie, http认证即客户端SSL）

跨浏览器解决方案
function createCORSRequest(method, url) {
	var xhr = new XMLHTTPRequest();
	if('withCredentials' in xhr) {
		xhr.open(method, url, true);
	} else if(typeof XDomainRequest != 'undefined') {
		xhr = new XDomainRequest();
		xhr.open(method, url);
	} else {
		xhr = null;
	}
	return xhr;
}
var request = createCORSRequest('get', 'http://somewhere.com');
if(request) {
	request.onload = function() {
		//处理request.responseText
	}
	request.send();
}

其他跨域技术
1.图像ping
	var img = new Image();
	img.onload = img.onerror = function() {alert('done');};
	img.src = 'http://somewhere.com/test?name=kkk';
	//此时浏览器会请求页面，完成请求时会得到通知，通常用来跟踪用户点击广告的次数
	//但是，这种方式只能发送get请求，并且无法访问服务器响应的文本

2.JSONP
	var url = 'http://freegeoip.net/json/?callback=handleResponse';
	function handleResponse(response) {
		alert('ip: ' + response.ip + 'which is in ' + response.city);
	}
	var script = document.createElement('script');
	script.src = url;
	document.body.insertBefore(script, document.body.firstChild);
	//callback指定的函数在获得响应后处理响应数据，此数据格式为json
	//方法简单易用且支持双向通信
	//缺点是，一、JSONP是从其他域加载代码执行，返回的响应有可能带有恶意代码
	//二、确定JSONP是否失败并不容易

Comet
1.长轮询
	浏览器发送请求，服务器隔一段事件响应，使用xhr和setTimeout()
2.HTTP流（除IE外可行）
	function createStreamingClient(url, progress, finished) {
		var xhr = new XMLHTTPRequest(), received = 0;
		xhr.open('get', url, true);
		xhr.onreadystatechange = function() {
			var result;
			if(xhr.readyState == 3) {
				result = xhr.responseText.substring(received);//只取得最新数据并调整计数器
				received += result.length;
				progress(result);//调用progress回调函数
			} else if(xhr.readyState ==4 ) {
				finished(xhr.responseText);
			}
		};
		xhr.send(null);
		return xhr;
	}
	var client = createStreamingClient('streaming.php', function(data) {
		alert('received' + data);
	}, function(data) {
		alert('done');
	});
	在连接完成前（关闭），会经历很多接受数据的过程

实现
1.SSE API（Firefox 6+,Safari 5+,Opera 11+,Chrome,ios 4+版Safari）
var source = new EventSource('myevents.php');//必须同源，即同域，同端口，同URL模式
其属性readyState:{1:打开了连接；2：关闭了连接}
source.onmessage = function(event) {//连接断开会重新连接
	var data = event.data;
	//之后处理数据
}
想不再连接 ，可以使用source.close();
2.事件流
通过一个持久的HTTP响应发送，其MIME类型为text/event-stream,响应格式为纯文本，如
data: foo

data: bar

data: foo
data: bar
将会触发三次onmessage,evet.data分别为'foo','bar','foo\nbar'，即连续的用'\n'连接

可设置ID用于跟踪，如(id在前或后都可以)
data: foo
id: 1
若连接断开，会向服务器发送一个包含名为Last-Event-ID的特殊HTTP头部的请求
，以便服务器知道下一次该触发哪个事件


WebSockets(Firefox 6+,Safari 5+,Chrome,IOS 4+版Safari)
使用ws://(未加密，http://) ,wss://(加密，https://)
var socket = new WebSocket('ws://www.example.com/server.php');//可以打开到任何站点的连接

状态
WebSocket.OPENING(0):正在建立连接
WebSocket.OPEN(1):已经简历连接
WebSocket.CLOSING(2):正在关闭连接
WebSocket.SLOSE(3):已经关闭连接

发送数据
var msg = {time: new Date(), text:'hello, world', clientID: 'adsadasdas123'};
socket.send(JSON.stringify(msg));//Web Sockets只能发送纯文本
socket.onmessage = function(event) {//服务器发送来数据时触发
	var data = event.data;
	//处理数据
}

其他事件
socket.onopen = funtion(){alert('connection established');}
socket.onerror = funtion(){alert('connection error');}
socket.onclose = funtion(){alert('connection closed');}//可访问event.wasClean,event.code,event.reason
