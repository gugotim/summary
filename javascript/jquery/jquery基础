默认的，jquery首先选择原生DOM查找元素，但使用自定义选择符时，性能就没有原生DOM快，
所以尽可能使用jquery已有方法
js从0开始，比如$('div.kkk:eq(1)')取得的是所有类名为kkk的div中的第二个div
css的选择从1开始，比如，$('div:nth-child(1)')取得的是作为其父元素的第一个子元素的div元素
另外，比如
<table>
  <tr></tr>
  <tr></tr>
  <tr></tr>
  <tr></tr>
</table>
要想对奇数行使用一个类，jquery应用$('tr:even').addClass('kkk')
因为JS从0开始编号，0是偶数；
而nth-child是jquery中唯一从1开始计数的,如 $('tr:nth-child(odd)').addClass('kkk')
则应使用tr(odd)

自定义选择符
$('div.kkk:eq(1)')        所有类名为kkk的div集和的第2个元素，因为js从0计数
$('tr:even')              从0开始，0为偶数，选中奇数行
$('tr:nth-child(odd)')    从1开始，选中奇数行
$().addClass              加类
$('div:contains(rose)')   含有文本rose的所有div,rose区分大小写，不需要引号
                          contains会在往子元素继续寻找，如
<div><div>123</div></div> 则返回结果包括2个div
$('input[type="radio"]:checked')  所有被选中的单选框

DOM编历
$().next()                某元素的下一个兄弟节点
$().nextAll()             某元素的剩下的所有兄弟节点
$().prev()                前一个
$().prevAll()             前面所有的
$().siblings()            其他所有兄弟节点
$().nextAll().addBack()   把自己也算上
$().parent().children()   包括自己的所有同辈元素
$().parent().children()   所有同辈元素
    .addClass()
    .end().find('td:eq(2)')   回到父节点，找到节点的第三个td子节点

在上面节点的基础上继续找使用find

$().get(n)                返回的是一个HTML DOM,对其只能使用原生DOM的方法
                            ，jquery如addClass()不起作用
$($().get(n)).addClass()  可以成功，因为把DOM元素转换成了jquery对象

祖先
.closest(selector)        向上寻找匹配选择符的最近父节点

window.onload 和 $(document).ready()的区别
window.onload必须等到图像完全下载完成
图像未下载完成时可以使用$(document).ready(),但对图像的高度或宽度等属性的设置不一定奏效

多库同时使用$时
<script src="prototype.js"></script>
<script src="jquery.js"></script>
<script>
	Jquery.noConflict();
</script>
<script src="myscript.js"></script>
这样，就可以在myscript.js中以$调用prototype.js的方法，Jquery.xxx调用jquery的方法

事件传播
事件捕获： 外->内        事件冒泡： 具体->外
DOM标准规定，事件的捕获从外到内，但返回（执行？）从内到外
jquery使用事件冒泡，如  <div><span><a></a></span></div>
单击链接时，相应顺序为 a->span->div

此时的问题：
若给div绑定了mouseout，从a上移开鼠标时mouseout会以a->span->div的顺序执行
用mouseenter和mouseleave则可避免，只会对目标元素作用

使用event.stopPropagation()可以使得事件不再向上冒泡
比如对上面的例子中链接a绑定click,在click事件中加入event.stopPropagation(),可让此点击事件
不再向上冒泡，即若点击的时链接，则此点击事件不上传给span和div，达到的效果是，点击链接则由链接
单击事件处理，点击div的其他部分则由div.click处理

默认操作，如<a>的打开链接，使用.preventDefault()停止
//特别的，在IE中要禁止默认操作，要设置event的returnValue为false，但jquery内部已实现跨浏览器
操作，因此直接使用.preventDefault()即可
默认操作和事件传播任何一方发生时都可以终止另一方，如在默认操作中调用.stopPropagation()则会停止
事件传播
同时，若在事件处理程序中返回false，则事件传播和默认操作都会停止,相当于对event同时调用
.stopPropagtion()和preventDeault()

.is(selector)
若集和中有一个元素与选择符匹配则返回true,如
$($(event.target).is('button'))       触发事件的元素含有标签button则返回true

事件委托
如想为一个div里的多个按钮注册单击事件，则可以只为div注册单击事件，通过event.target获取
实际单击的按钮，同时最后使用event.stopPropagation()停止事件冒泡传播
